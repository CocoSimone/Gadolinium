#pragma once
#include <JIT.hpp>

namespace n64 {
void add(JIT&, u32);
void addu(JIT&, u32);
void addi(JIT&, u32);
void addiu(JIT&, u32);
void andi(JIT&, u32);
void and_(JIT&, u32);
void branch(JIT&, bool, s64);
void branch_likely(JIT&, bool, s64);
void b(JIT&, u32, bool);
void blink(JIT&, u32, bool);
void bl(JIT&, u32, bool);
void bllink(JIT&, u32, bool);
void dadd(JIT&, u32);
void daddu(JIT&, u32);
void daddi(JIT&, u32);
void daddiu(JIT&, u32);
void ddiv(JIT&, u32);
void ddivu(JIT&, u32);
void div(JIT&, u32);
void divu(JIT&, u32);
void dmult(JIT&, u32);
void dmultu(JIT&, u32);
void dsll(JIT&, u32);
void dsllv(JIT&, u32);
void dsll32(JIT&, u32);
void dsra(JIT&, u32);
void dsrav(JIT&, u32);
void dsra32(JIT&, u32);
void dsrl(JIT&, u32);
void dsrlv(JIT&, u32);
void dsrl32(JIT&, u32);
void dsub(JIT&, u32);
void dsubu(JIT&, u32);
void j(JIT&, u32);
void jr(JIT&, u32);
void jal(JIT&, u32);
void jalr(JIT&, u32);
void lui(JIT&, u32);
void lbu(JIT&, u32);
void lb(JIT&, u32);
void ld(JIT&, u32);
void ldl(JIT&, u32);
void ldr(JIT&, u32);
void lh(JIT&, u32);
void lhu(JIT&, u32);
void ll(JIT&, u32);
void lld(JIT&, u32);
void lw(JIT&, u32);
void lwl(JIT&, u32);
void lwu(JIT&, u32);
void lwr(JIT&, u32);
void mfhi(JIT&, u32);
void mflo(JIT&, u32);
void mult(JIT&, u32);
void multu(JIT&, u32);
void mthi(JIT&, u32);
void mtlo(JIT&, u32);
void nor(JIT&, u32);
void sb(JIT&, u32);
void sc(JIT&, u32);
void scd(JIT&, u32);
void sd(JIT&, u32);
void sdl(JIT&, u32);
void sdr(JIT&, u32);
void sh(JIT&, u32);
void sw(JIT&, u32);
void swl(JIT&, u32);
void swr(JIT&, u32);
void slti(JIT&, u32);
void sltiu(JIT&, u32);
void slt(JIT&, u32);
void sltu(JIT&, u32);
void sll(JIT&, u32);
void sllv(JIT&, u32);
void sub(JIT&, u32);
void subu(JIT&, u32);
void sra(JIT&, u32);
void srav(JIT&, u32);
void srl(JIT&, u32);
void srlv(JIT&, u32);
void trap(JIT&, bool);
void or_(JIT&, u32);
void ori(JIT&, u32);
void xor_(JIT&, u32);
void xori(JIT&, u32);
void mtc2(JIT&, u32);
void mfc2(JIT&, u32);
void dmtc2(JIT&, u32);
void dmfc2(JIT&, u32);
}