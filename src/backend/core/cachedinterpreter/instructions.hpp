#pragma once
#include <CachedInterpreter.hpp>

namespace n64 {
void add(CachedInterpreter&, u32);
void addu(CachedInterpreter&, u32);
void addi(CachedInterpreter&, u32);
void addiu(CachedInterpreter&, u32);
void andi(CachedInterpreter&, u32);
void and_(CachedInterpreter&, u32);
void branch(CachedInterpreter&, bool, s64);
void branch_likely(CachedInterpreter&, bool, s64);
void b(CachedInterpreter&, u32, bool);
void blink(CachedInterpreter&, u32, bool);
void bl(CachedInterpreter&, u32, bool);
void bllink(CachedInterpreter&, u32, bool);
void dadd(CachedInterpreter&, u32);
void daddu(CachedInterpreter&, u32);
void daddi(CachedInterpreter&, u32);
void daddiu(CachedInterpreter&, u32);
void ddiv(CachedInterpreter&, u32);
void ddivu(CachedInterpreter&, u32);
void div(CachedInterpreter&, u32);
void divu(CachedInterpreter&, u32);
void dmult(CachedInterpreter&, u32);
void dmultu(CachedInterpreter&, u32);
void dsll(CachedInterpreter&, u32);
void dsllv(CachedInterpreter&, u32);
void dsll32(CachedInterpreter&, u32);
void dsra(CachedInterpreter&, u32);
void dsrav(CachedInterpreter&, u32);
void dsra32(CachedInterpreter&, u32);
void dsrl(CachedInterpreter&, u32);
void dsrlv(CachedInterpreter&, u32);
void dsrl32(CachedInterpreter&, u32);
void dsub(CachedInterpreter&, u32);
void dsubu(CachedInterpreter&, u32);
void j(CachedInterpreter&, u32);
void jr(CachedInterpreter&, u32);
void jal(CachedInterpreter&, u32);
void jalr(CachedInterpreter&, u32);
void lui(CachedInterpreter&, u32);
void lbu(CachedInterpreter&, u32);
void lb(CachedInterpreter&, u32);
void ld(CachedInterpreter&, u32);
void ldl(CachedInterpreter&, u32);
void ldr(CachedInterpreter&, u32);
void lh(CachedInterpreter&, u32);
void lhu(CachedInterpreter&, u32);
void ll(CachedInterpreter&, u32);
void lld(CachedInterpreter&, u32);
void lw(CachedInterpreter&, u32);
void lwl(CachedInterpreter&, u32);
void lwu(CachedInterpreter&, u32);
void lwr(CachedInterpreter&, u32);
void mfhi(CachedInterpreter&, u32);
void mflo(CachedInterpreter&, u32);
void mult(CachedInterpreter&, u32);
void multu(CachedInterpreter&, u32);
void mthi(CachedInterpreter&, u32);
void mtlo(CachedInterpreter&, u32);
void nor(CachedInterpreter&, u32);
void sb(CachedInterpreter&, u32);
void sc(CachedInterpreter&, u32);
void scd(CachedInterpreter&, u32);
void sd(CachedInterpreter&, u32);
void sdl(CachedInterpreter&, u32);
void sdr(CachedInterpreter&, u32);
void sh(CachedInterpreter&, u32);
void sw(CachedInterpreter&, u32);
void swl(CachedInterpreter&, u32);
void swr(CachedInterpreter&, u32);
void slti(CachedInterpreter&, u32);
void sltiu(CachedInterpreter&, u32);
void slt(CachedInterpreter&, u32);
void sltu(CachedInterpreter&, u32);
void sll(CachedInterpreter&, u32);
void sllv(CachedInterpreter&, u32);
void sub(CachedInterpreter&, u32);
void subu(CachedInterpreter&, u32);
void sra(CachedInterpreter&, u32);
void srav(CachedInterpreter&, u32);
void srl(CachedInterpreter&, u32);
void srlv(CachedInterpreter&, u32);
void trap(CachedInterpreter&, bool);
void or_(CachedInterpreter&, u32);
void ori(CachedInterpreter&, u32);
void xor_(CachedInterpreter&, u32);
void xori(CachedInterpreter&, u32);
void mtc2(CachedInterpreter&, u32);
void mfc2(CachedInterpreter&, u32);
void dmtc2(CachedInterpreter&, u32);
void dmfc2(CachedInterpreter&, u32);
void cfc2(CachedInterpreter& cpu, u32);
void ctc2(CachedInterpreter& cpu, u32);
}